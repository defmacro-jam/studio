
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection Rules
    match /users/{userId} {
      // Allow users to read their own document
      allow read: if request.auth != null && request.auth.uid == userId;
      // Allow authenticated users to create their own user document upon signup
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow users to update their own document (e.g., displayName, avatarUrl, email)
      // Ensure they can't change their role or UID through this rule.
      allow update: if request.auth != null && request.auth.uid == userId
                    && request.resource.data.uid == userId // Cannot change UID
                    && (!('role' in request.resource.data) || request.resource.data.role == resource.data.role); // Role can only be changed by admin rule below

      // Deleting user documents should typically be handled by an admin or a backend function.
      // allow delete: if false; // Or define admin delete rule below
    }

    // Teams Collection Rules
    match /teams/{teamId} {
      // Allow authenticated users to read team data if they are a member of the team
      allow read: if request.auth != null && resource.data.members.hasAny([request.auth.uid]);

      // Allow authenticated users to create new teams
      // - The creator must be the owner.
      // - The creator must be the first member listed.
      // - The creator's role in memberRoles must be 'owner'.
      allow create: if request.auth != null
                    && request.resource.data.owner == request.auth.uid
                    && request.resource.data.members[0] == request.auth.uid
                    && request.resource.data.memberRoles[request.auth.uid] == 'owner';

      // Allow team owners or managers to update team data
      // - Fields like 'name', 'members', 'memberRoles', 'scrumMasterUid' can be updated.
      // - Prevent changing the 'owner', 'createdBy', 'createdAt' fields.
      allow update: if request.auth != null
                    && (get(/databases/$(database)/documents/teams/$(teamId)).data.memberRoles[request.auth.uid] == 'owner' ||
                        get(/databases/$(database)/documents/teams/$(teamId)).data.memberRoles[request.auth.uid] == 'manager')
                    && !(request.resource.data.owner != resource.data.owner)
                    && !(request.resource.data.createdBy != resource.data.createdBy)
                    && !(request.resource.data.createdAt != resource.data.createdAt);


      // Allow team owners to delete teams
      allow delete: if request.auth != null && get(/databases/$(database)/documents/teams/$(teamId)).data.owner == request.auth.uid;
    }

    // Retro Items and Poll Responses (Example - customize as needed)
    // Assuming these are subcollections of a team or a global collection linked to a team
    // This is a placeholder; you'll need to define rules based on your data structure.
    // For example, if retroItems are global and have a teamId field:
    // match /retroItems/{itemId} {
    //   allow read, write: if request.auth != null &&
    //                      get(/databases/$(database)/documents/teams/$(request.resource.data.teamId)).data.members.hasAny([request.auth.uid]);
    // }
    // match /pollResponses/{responseId} {
    //  allow read, write: if request.auth != null &&
    //                      get(/databases/$(database)/documents/teams/$(request.resource.data.teamId)).data.members.hasAny([request.auth.uid]);
    // }


    // Admin Rules:
    // Allow users with the 'admin' role (defined in their /users/{userId} document)
    // to perform any action on any user document.
    match /users/{docUserId} { // Renamed {userId} to {docUserId} to avoid conflict in this specific rule context
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    // Admins can also manage all teams
    match /teams/{adminTeamId} { // Renamed {teamId} for clarity
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Fallback Rule: Deny all other access by default for security.
    // This rule is implicitly active if no other rule matches.
    // However, you can explicitly state it:
    // match /{document=**} {
    //  allow read, write: if false;
    // }
  }
}
